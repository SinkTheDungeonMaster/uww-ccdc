##
## BEGINNING OF:
## ACCESS CONTROL
##

- control_key: AC-1
  standard_key: NIST-800-53
  covered_by: []
  implementation_status: not applicable
  narrative:
    - key: a
      text: |
        This is an organizational control outside the scope of
        component-level configuration.
    - key: b
      text: |
        This is an organizational control outside the scope of
        component-level configuration.

- control_key: AC-2
  standard_key: NIST-800-53
  covered_by: []
  implementation_status: partial
  narrative:
    - key: a
      text: |
        Ansible Tower's Role-based Access Control (RBAC) implementation
        offers multiple types of information system accounts, each
        with differing access and administrative roles.

        - "Normal User," an individual would have read and write
        access limited to the resources (such as inventory, projects, and
        job templates) for which that user has been granted appropriate
        roles and privileges.

        - "System Auditor," an individual would implicitly inherit
        the read-only capability for all objects within the Ansible Tower
        environment.

        - "System Administrator," also known as a Superuser, an
        individual has full system administration privileges for Tower -- with full
        read and write privileges over the entire Ansible Tower installation. A
        System Administrator is typically responsible for managing all aspects of
        Ansible Tower and delegating responsibilities for day-to-day work to various
        Users. Assign with caution!

        Role-based Access Controls (RBAC) are built into Ansible Tower and allow
        Ansible Tower administrators to delegate access to server inventories, organizations,
        and more. Administrators can also centralize the management of various credentials,
        allowing end users to leverage a needed secret without ever exposing that secret to the
        end user. RBAC controls allow Ansible Tower to help you increase security and streamline
        management.

        Documentation of Ansible Tower's RBAC system is available in the Ansible Tower User Guide:
        https://docs.ansible.com/ansible-tower/latest/html/userguide/security.html#role-based-access-controls

    - key: b
      text: |
        Assigning Ansible Tower account managers is an organizational
        process outside the scope of Ansible Tower configuration.
    - key: c
      text: |
        Establishing conditions for group and role membership is an
        organizational process outside the scope of Ansible Tower
        configuration.
    - key: d
      text: |
        To specify authorized users of Ansible Tower, group and role
        membership, and access authorizations, refer to the
        Ansible Tower User Guide:

        https://docs.ansible.com/ansible-tower/latest/html/userguide/users.html
    - key: e
      text: |
        Organizational processes regarding account creation requests
        are outside the scope of Ansible Tower configuration.
    - key: f
      text: |
        Organizational processes regarding administration of Ansible Tower
        accounts are outside the scope of Ansible Tower configuration.
    - key: g
      text: |
        The Ansible Tower logging subsystems can assist with monitoring the use of Ansible Tower
        accounts. Logging is a standalone feature introduced in Ansible Tower that provides
        the capability to send detailed logs to several kinds of 3rd party external log
        aggregation services.

        For full details of the logging subsystem, including technical documentation and
        data schema details, refer to the "Tower Logging and Aggregation" chapter of the
        Ansible Tower Administration Guide:

        https://docs.ansible.com/ansible-tower/latest/html/administration/logging.html
    - key: h
      text: |
        Organizational processes regarding account termination or need-to-know
        changes are outside the scope of Ansible Tower configuration.
    - key: i
      text: |
        Organizational processes regarding access authorization are outside
        the scope of Ansible Tower configuration.
    - key: j
      text: |
        Organizational processes regarding the review of account management policies
        are outside the scope of Ansible Tower configuration.
    - key: k
      text: |
        Organizational processes for reissuing shared/group account credentials
        are outside the scope of Ansible Tower configuration.

- control_key: AC-2 (1)
  standard_key: NIST-800-53
  covered_by: []
  implementation_status: complete
  narrative:
    - text: |
        Ansible Tower offers supported integrations with many account management
        systems, such as Kerberos, Azure Active Directory, LDAP, RADIUS, SAML, TACACS+,
        and many others.

        Refer to the Ansible Tower Administration Guide for guidance on connecting
        Ansible Tower into an automated account management system:

        https://docs.ansible.com/ansible-tower/latest/html/administration/ent_auth.html

        NOTE: To meet many account management requirements, such as those dealing with
        password complexity, an external account management system MUST be used!

- control_key: AC-2 (2)
  standard_key: NIST-800-53
  covered_by: []
  implementation_status: partial
  narrative:
    - text: |
        Ansible Tower does not natively have the capability to automatically
        remove or disable temporary and emergency accounts.

        When Ansible Tower is configured to authenticate users against an external
        authentication service (e.g. Red Hat IdM), the external provider would be
        responsible for removal and disablement of temporary and emergency accounts.
        In such scenarios, Ansible Tower would inherit satisfaction of this control
        from the external authentication service.

        A fringe case does exist in which an organizational user is temporarily
        given access to Ansible Tower (e.g. temporary team member joining for a
        sprint). In such cases, Ansible Tower does not have the ability to automatically
        remove or disable the account after an organizationally-defined time period. An
        Ansible Tower administrator would need to manually remove
        or disable the account.

- control_key: AC-2 (3)
  standard_key: NIST-800-53
  covered_by: []
  implementation_status: partial
  narrative:
    - text: |
        Ansible Tower does not natively have the capability to automatically
        disable inactive accounts after an organization-defined time period.

        When Ansible Tower is configured to authenticate users against an external
        authentication service (e.g. Red Hat IdM), the external provider would be
        responsible for automatic disablement of accounts. In such scenarios,
        Ansible Tower would inherit satisfaction of this control from the
        external authentication service.

        However, a fringe case does exist when:
        - Ansible Tower is configured to use an external authentication service, such as
        a corporate Red Hat IdM or Active Directory instance; and,
        - An organizational user is added to Ansible Tower however does not login
        for a time period that exceeds the organization-defined threshold; and,
        - During that time period the user logins to other corporate services, thus
        the external authentication provider shows the account is being actively used.

        In such a scenario, Ansible Tower does not currently have the capability to
        automatically disable the account. An Ansible Tower administrator would need to manually
        remove or disable the account.

- control_key: AC-2 (5)
  standard_key: NIST-800-53
  covered_by: []
  implementation_status: complete
  narrative:
    - text: |
        Introduced in Ansible Tower 2.4 is a feature which adds an Auth-Token-Timeout
        to every response that includes a valid user-supplied token. This setting
        changed to Session-Timeout in Ansible Tower 3.3. The value of Session-Timeout
        is determined by the configuration (time expressed in seconds) of the
        SESSION_COOKIE_AGE.

        The value of Session-Timeout indicates the length of time, in seconds,
        that the supplied token is valid, from the moment the request was initiated.
        Starting in Ansible Tower 3.2, this setting can be changed as documented in
        the "Changing Default Timeout for Authentication" section of the
        Ansible Tower Administration documentation:

        https://docs.ansible.com/ansible-tower/latest/html/administration/authentication_timeout.html

- control_key: AC-2 (6)
  standard_key: NIST-800-53
  covered_by: []
  implementation_status: unknown
  narrative:
    - text: |
        This control has not been evaluated in the context of
        Ansible Tower.

        The following ticket is being used to track control
        response status:

        https://github.com/ComplianceAsCode/redhat/issues/727

- control_key: AC-2 (7)
  standard_key: NIST-800-53
  covered_by: []
  implementation_status: complete
  narrative:
    - key: a
      text: |
        Ansible Tower's Role-based Access Control (RBAC) implementation
        offers multiple types of information system accounts, each
        with differing access and administrative roles.

        - "Normal User," an individual would have read and write
        access limited to the resources (such as inventory, projects, and
        job templates) for which that user has been granted appropriate
        roles and privileges.

        - "System Auditor," an individual would implicitly inherit
        the read-only capability for all objects within the Ansible Tower
        environment.

        - "System Administrator," also known as a Superuser, an
        individual has full system administration privileges for Tower -- with full
        read and write privileges over the entire Ansible Tower installation. A
        System Administrator is typically responsible for managing all aspects of
        Ansible Tower and delegating responsibilities for day-to-day work to various
        Users. Assign with caution!

        Role-based Access Controls (RBAC) are built into Ansible Tower and allow
        Ansible Tower administrators to delegate access to server inventories, organizations,
        and more. Administrators can also centralize the management of various credentials,
        allowing end users to leverage a needed secret without ever exposing that secret to the
        end user. RBAC controls allow Ansible Tower to help you increase security and streamline
        management.

        Documentation of Ansible Tower's RBAC system is available in the Ansible Tower User Guide:
        https://docs.ansible.com/ansible-tower/latest/html/userguide/security.html#role-based-access-controls

    - key: b
      text: |
        Ansible Tower automatically logs creation, modification,
        and removal of Role-based Access Control (RBAC) privileges.
        This is non-configurable default behavior.

    - key: c
      text: |
        This is an organizational process control
        outside the scope of Ansible Tower configuration.

- control_key: AC-3
  standard_key: NIST-800-53
  covered_by: []
  implementation_status: complete
  narrative:
    - text: |
        'There are three types of Tower users that can be assigned:

        - Normal User
        Normal Users have read and write access limited to the resources
        (such as inventory, projects, and job templates) for which that user
        has been granted the appropriate roles and privileges.

        - System Auditor
        Auditors implicitly inherit the read-only capability for all objects
        within the Tower environment.

        - System Administrator
        A Tower System Administrator (also known as a Superuser) has admin,
        read, and write privileges over the entire Tower installation. A
        System Administrator is typically responsible for managing all
        aspects of Tower and delegating responsibilities for day-to-day
        work to various Users.

        Ansible Tower uses role-based access control to provide the ability
        to read, modify, and administer projects, inventories, job templates,
        and other Ansible Tower elements. The role-based access control policies
        can be defined per-user, or per user type as indicated above.

        Additional detail can be found in the Ansible Tower documentation:

        https://docs.ansible.com/ansible-tower/latest/html/userguide/users.html'

- control_key: AC-3 (1)
  standard_key: NIST-800-53
  covered_by: []
  implementation_status: not applicable
  narrative:
    - text: |
        This control was withdrawn by NIST.

- control_key: AC-3 (6)
  standard_key: NIST-800-53
  covered_by: []
  implementation_status: not applicable
  narrative:
    - text: |
        This control was withdrawn by NIST.

- control_key: AC-4 (16)
  standard_key: NIST-800-53
  covered_by: []
  implementation_status: not applicable
  narrative:
    - text: |
        This control was withdrawn by NIST.

- control_key: AC-7
  standard_key: NIST-800-53
  covered_by: []
  implementation_status: partial
  narrative:
    - key: a
      text: |
        'Ansible Tower does not currently have the capability to enforce limits
        on consecutive logon attempts.

        To satisfy this control an external authentication service, such
        as Red Hat IdM, must be used. This control is not applicable to
        Ansible Tower when an external authentication service is used.'
    - key: b
      text: |
        'Ansible Tower does not currently have the capability automatically
        lock an account for an organizationally-defined time period, nor
        does Ansible Tower have the capability to lock an account until
        released by an administrator.

        To satisfy those elements of this control an external
        authentication service, such as Red Hat IdM, must be used.
        Those two elements of this control are not applicable to
        Ansible Tower when an external authentication service
        is used.

        Ansible Tower does not currently have the ability to delay
        logon prompts according to an organizationally-defined delay
        algorithm when the maximum number of unsuccessful attempts is
        exceeded. Ansible Tower cannot be configured to perform
        this functionality; delay of further logon prompts is a permanent
        finding.'

- control_key: AC-7 (1)
  standard_key: NIST-800-53
  covered_by: []
  implementation_status: not applicable
  narrative:
    - text: |
        This control was withdrawn by NIST.

- control_key: AC-8
  standard_key: NIST-800-53
  covered_by: []
  implementation_status: complete
  narrative:
    - key: a
      text: |
        'Ansible Tower supports configuration of custom system use
        notifications.

        From within the Tower web interface:

        (1) Select "Settings", which is the gear icon in the top right corner

        (2) Select "Configure Tower," which is the second icon in the third
        row

        (3) Select "User Interface"

        (4) Enter your system use notification in the "CUSTOM LOGIN INFO"
        field. Note breaks must use "\n"'
    - key: b
      text: |
        'Custom system use notifications are displayed on the logon screen
        prior to the "login" button. This is default, non-configurable
        behavior.'
    - key: c
      text: |
        'Ansible Tower does not differentiate logon screens between private and
        publicly accessible instances. Custom system use notifications
        for publicly accessible systems can be implemented using the
        procedures from AC-8(a).'

- control_key: AC-13
  standard_key: NIST-800-53
  covered_by: []
  implementation_status: not applicable
  narrative:
    - text: |
        This control was withdrawn by NIST.

- control_key: AC-14
  standard_key: NIST-800-53
  covered_by: []
  implementation_status: complete
  narrative:
    - text: |
        'Regardless of access mechanism, such as the Ansible Tower
        console, unauthenticated users will only be shown the
        system use notifications (as defined in AC-8) and login prompt. This is
        non-configurable behavior.

        External service APIs also require authentication
        prior to granting resource access.'

- control_key: AC-17
  standard_key: NIST-800-53
  covered_by: []
  implementation_status: not applicable
  narrative:
    - text: ''
#     - text: |
#        'This control reflects organizational procedures/policies, and is not
#        applicable to the configuration of Ansible Tower.'

- control_key: AC-18
  standard_key: NIST-800-53
  covered_by: []
  implementation_status: not applicable
  narrative:
    - text: ''
#    - text: |
#        'This control reflects organizational procedures/policies, and is not
#        applicable to the configuration of Ansible Tower.'

- control_key: AC-19
  standard_key: NIST-800-53
  covered_by: []
  implementation_status: not applicable
  narrative:
    - text: ''
#    - text: |
#        'This control reflects organizational procedures/policies, and is not
#        applicable to the configuration of Ansible Tower.'

- control_key: AC-20
  standard_key: NIST-800-53
  covered_by: []
  implementation_status: not applicable
  narrative:
    - text: ''
#    - text: |
#        'This control reflects organizational procedures/policies, and is not
#        applicable to the configuration of Ansible Tower.'

- control_key: AC-22
  standard_key: NIST-800-53
  covered_by: []
  implementation_status: not applicable
  narrative:
    - text: ''
#    - text: |
#        'This control reflects organizational procedures/policies, and is not
#        applicable to the configuration of Ansible Tower.'
