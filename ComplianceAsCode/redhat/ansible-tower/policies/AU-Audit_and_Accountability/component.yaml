##
## BEGINNING OF:
## AUDIT AND ACCOUNTABILITY
##

- control_key: AU-1
  standard_key: NIST-800-53
  covered_by: []
  implementation_status: not applicable
  narrative:
    - text: ''

- control_key: AU-2
  standard_key: NIST-800-53
  covered_by: []
  implementation_status: not applicable
  narrative:
    - text: ''

- control_key: AU-3
  standard_key: NIST-800-53
  covered_by: []
  implementation_status: complete
  narrative:
    - text: |
        'By default Ansible Tower generates audit records containing
        information that establishes what type of event occurred,
        when the event occurred, where the event occurred, the source
        of the event, the outcome of the event, and the identity
        of individuals or subjects associated with the event.

        Ansible Tower cannot be configured to be out of compliance
        with this control.

        A sample audit record is provided below.

        TYPE OF EVENT:
        The "operation" field identifies the type of event recorded.
        In this case, a new user was created.

        WHEN THE EVENT OCCURRED:
        The "timestamp" field indicates the system time of
        when the event occurred. In this example the event happened
        at 2018-06-19T00:46:45.337458Z.

        WHERE THE EVENT OCCURRED:
        The "X-API-Node" field indicates where the event occurred. In
        this example, the host was tower.redhatgov.io.

        SOURCE OF EVENT:
        The "actor" field indicates the "alice" username initiated
        this event.

        OUTCOME OF EVENT:
        The "changes" field indicate the user was created with
        associated metadata such as first_name and last_name.

        IDENTITY OF INDIVIDUALS/OBJECTS INVOLVED:
        The "summary_fields" indicates an actor with the username "alice"
        created a new user with the username "bob."

        Full documentation of all available fields is
        available in the Ansible Tower product documentation:

        https://docs.ansible.com/ansible-tower/latest/html/towerapi/activity_stream.html


        ---
             HTTP 200 OK
             Allow: GET, HEAD, OPTIONS
             Content-Type: application/json
             Vary: Accept
             X-API-Node: tower.redhatgov.io
             X-API-Time: 0.739s
             ....
             {
                 "id": 25,
                 "type": "activity_stream",
                 "url": "/api/v1/activity_stream/25/",
                 "related": {
                     "user": [
                         "/api/v1/users/4/"
                     ],
                     "actor": "/api/v1/users/1/"
                 },
                 "summary_fields": {
                     "user": [
                         {
                             "username": "bob",
                             "first_name": "Bob",
                             "last_name": "Ross",
                             "id": 4
                         }
                     ],
                     "actor": {
                         "username": "alice",
                         "first_name": "Alice",
                         "last_name": "Liddel",
                         "id": 1
                     }
                 },
                 "timestamp": "2018-06-19T00:46:45.337458Z",
                 "operation": "create",
                 "changes": {
                     "username": "bob",
                     "first_name": "Bob",
                     "last_name": "Ross",
                     "is_active": true,
                     "id": 4,
                     "is_superuser": false,
                     "is_staff": false,
                     "password": "hidden",
                     "email": "bob@ross.com",
                     "date_joined": "2018-06-19 00:46:45.314590+00:00"
                 },
                 "object1": "user",
                 "object2": "",
                 "object_association": ""
             }
        ---'

- control_key: AU-4
  standard_key: NIST-800-53
  covered_by: []
  implementation_status: not applicable
  narrative:
    - text: ''

- control_key: AU-5
  standard_key: NIST-800-53
  covered_by: []
  implementation_status: not applicable
  narrative:
    - key: a
      text: |
        'Ansible Tower utilizes the audit and syslog subsystems of the
        underlying operating system. Responses to audit subsystem
        failures is configured in the operating system and not
        Ansible Tower.'
    - key: b
      text: |
        'Ansible Tower utilizes the audit and syslog subsystems of the
        underlying operating system. Responses to audit subsystem
        failures is configured in the operating system and not
        Ansible Tower.'

- control_key: AU-6
  standard_key: NIST-800-53
  covered_by: []
  implementation_status: not applicable
  narrative:
    - text: ''

- control_key: AU-8
  standard_key: NIST-800-53
  covered_by: []
  implementation_status: complete
  narrative:
    - key: a
      text: |
        'Ansible Tower relies on the time services
        provided by the underlying operating system. Utilization of
        platform-provided time services is default, non-configurable
        behavior.'

    - key: b
      text: |
        'Ansible Tower utilizes the time zone settings of the underlying
        operating system. This is default, non-configurable behavior.'

- control_key: AU-9
  standard_key: NIST-800-53
  covered_by: []
  implementation_status: complete
  narrative:
    - text: |
        'Ansible Tower logfiles have been consolidated and can be easily
        accessed from two centralized locations:

        - /var/log/tower/
        - /var/log/supervisor/

        Each directory is protected by operating system-level
        mandatory access control settings and require administrative (root)
        privilege to access.

        Log data kept within Ansible Tower, such as the Activity Stream,
        is presented only when the accessing user has permissions over the
        audited object (e.g. shows audit logs only of system groups belonging
        to the accessing user).'

- control_key: AU-11
  standard_key: NIST-800-53
  covered_by: []
  implementation_status: not applicable
  narrative:
    - text: |
        'For locally retained logs, such as those recorded to
        /var/log/ansible, Ansible Tower utilizes the audit subsystems
        of the host operating system. Retention of local logs is
        reflective of the operating system settings and not Ansible Tower.

        Retention of audit logs sent to an aggregation service, such
        as Elastic, is configured by the central aggregation service and
        outside the scope of configuring Ansible Tower.

- control_key: AU-12
  standard_key: NIST-800-53
  covered_by: []
  implementation_status: planned
  narrative:
    - key: a
      text: |
        'By default, Ansible Tower audits the following events.
        Audit of these events is automatic and not user configurable.

        - Audit User & Group Management Events,
        User modify (Success and Failure)
        - Audit User & Group Management Events,
        User add (Success and Failure)
        - Audit User & Group Management Events,
        User delete (Success and Failure)
        - Audit User & Group Management Events,
        Group/Role add (Success and Failure)
        - Audit User & Group Management Events,
        Group/Role delete (Success and Failure)
        - Audit User & Group Management Events,
        Group/Role modify (Success and Failure)


        The following BugZillas track feature creation for Ansible Tower
        to audit certain events:

        - Audit Logons (Success and Failure):
        https://github.com/ComplianceAsCode/redhat/issues/345

        - Audit Logoff (Success and Failure):
        https://github.com/ComplianceAsCode/redhat/issues/346

        - Audit File & Object Creation (Success and Failure):

        - Audit File & Object Access (Success and Failure):
        https://github.com/ComplianceAsCode/redhat/issues/348

        - Audit File & Object Deletion (Success and Failure)

        - Audit File & Object Modification (Success and Failure)

        - Audit File & Object Permission Changes (Success and Failure):
        https://github.com/ComplianceAsCode/redhat/issues/351

        - Audit File & Object Ownership Modifications (Success and Failure):
        https://github.com/ComplianceAsCode/redhat/issues/352

        - Audit User & Group Management Events, User suspend (Success and Failure):
        https://github.com/ComplianceAsCode/redhat/issues/451

        - Audit User & Group Management Events, User lock (Success and Failure):
        https://github.com/ComplianceAsCode/redhat/issues/452

        - Audit Use of Privileged/Special Rights, security or policy changes (Success and Failure):
        https://github.com/ComplianceAsCode/redhat/issues/456

        - Audit Use of Privileged/Special Rights, configuration changes (Success and Failure):
        https://github.com/ComplianceAsCode/redhat/issues/457

        - Audit Use of Privileged/Special Rights, Admin or root-level access (Success and Failure):
        - Audit Privilege/Role Escalation (Success and Failure):

        - Audit and Log Data Access (Success and Failure):
        https://github.com/ComplianceAsCode/redhat/issues/460

        - Export of Information (Success and Failure):
        https://github.com/ComplianceAsCode/redhat/issues/461 Information within
        Ansible Tower pertains to the Ansible Tower configuration. While
        Playbooks/Projects may be created within Tower locally and can be
        exported, the best practices recommend that the actual automation
        functions be maintained outside of Tower - in a version controlled
        repository and/or a CMDB for instance. The Ansible Tower specific
        data can be exported using 2 methods:

        - The first method is to use the "setup.sh" script to back up the
          system:
          https://docs.ansible.com/ansible-tower/latest/html/administration/backup_restore.html
          This will successfully export all the Tower specific data including
          - the database
          - the SECRET_KEY file
          The per-system backups include:
          - custom user config files
          - job stdout
          - manual projects (if external version control systems are not being used to store playbooks)

          OS level controls methods (such as tripwire) could be used to check
          who ran the setup.sh script and when.

        - Information about Tower may be also gleaned via the APIs. For instance
          a list of users configured can be obtained from the following API endpoint: `GET /api/v2/users/`
          Example:
            ```
                    {
            "id": 15,
            "type": "user",
            "url": "/api/v2/users/15/",
            "related": {
                "admin_of_organizations": "/api/v2/users/15/admin_of_organizations/",
                "organizations": "/api/v2/users/15/organizations/",
                "roles": "/api/v2/users/15/roles/",
                "access_list": "/api/v2/users/15/access_list/",
                "teams": "/api/v2/users/15/teams/",
                "credentials": "/api/v2/users/15/credentials/",
                "activity_stream": "/api/v2/users/15/activity_stream/",
                "projects": "/api/v2/users/15/projects/"
            },
            "summary_fields": {
                "user_capabilities": {
                    "edit": true,
                    "delete": true
                }
            },
            "created": "2018-08-15T10:30:39.041Z",
            "username": "sysops2",
            "first_name": "Sysops2",
            "last_name": "Sysops2",
            "email": "sys@ops.com",
            "is_superuser": false,
            "is_system_auditor": false,
            "ldap_dn": "",
            "external_account": null,
            "auth": []
            },
            ```

           An export of all changes made to the system can be obtained at the
           API end-point: `/api/v2/activity_stream`. For example the following
           output indicates that a new project was created:
             ```
                "operation": "create",
            "changes": {
                "credential": null,
                "scm_branch": "",
                "name": "Meetup Demos",
                "scm_update_cache_timeout": 0,
                "scm_clean": false,
                "scm_url": "https://github.com/termlen0/meetups",
                "scm_delete_on_update": false,
                "local_path": "",
                "scm_type": "git",
                "timeout": 0,
                "scm_update_on_launch": false,
                "organization": "Default",
                "id": 29,
                "description": ""
            },
            ```

           The APIs themselves are available to all Tower users. However, the
           APIs are scoped to whatever that particular user is able to
           accomplish over the GUI. This is normal since all GUI components are
           built off of the API and there is a 1-1 relationship between the two.
           While the activity stream keeps track of the changes made, user
           clicks across the different APIs are not logged.

        - Import of Information (Success and Failure):

        Certain events, such as updating Projects, may pull data
        from a SCM. In such cases the audit event includes the content
        defined in AU-3 as well as the URL if the information being imported.

        A sample audit event for updating a "Demo Project" with content from
        GitHub is below. The "scm_url" field reflects source of information
        being imported and "status" field indicates success or failure:

            {
                "count": 1,
                "next": null,
                "previous": null,
                "results": [
                    {
                        "id": 2,
                        "type": "project_update",
                        "url": "/api/v1/project_updates/2/",
                        "related": {
                            "created_by": "/api/v1/users/1/",
                            "unified_job_template": "/api/v1/projects/4/",
                            "stdout": "/api/v1/project_updates/2/stdout/",
                            "project": "/api/v1/projects/4/",
                            "cancel": "/api/v1/project_updates/2/cancel/",
                            "notifications": "/api/v1/project_updates/2/notifications/",
                            "scm_inventory_updates": "/api/v1/project_updates/2/scm_inventory_updates/"
                        },
                        "summary_fields": {
                            "instance_group": {
                                "id": 1,
                                "name": "tower"
                            },
                            "unified_job_template": {
                                "id": 4,
                                "name": "Demo Project",
                                "description": "",
                                "unified_job_type": "project_update"
                            },
                            "project": {
                                "id": 4,
                                "name": "Demo Project",
                                "description": "",
                                "status": "successful",
                                "scm_type": "git"
                            },
                            "created_by": {
                                "id": 1,
                                "username": "admin",
                                "first_name": "",
                                "last_name": ""
                            },
                            "user_capabilities": {
                                "start": true,
                                "delete": true
                            }
                        },
                        "created": "2018-06-29T16:31:37.862Z",
                        "modified": "2018-06-29T16:31:38.111Z",
                        "name": "Demo Project",
                        "description": "",
                        "unified_job_template": 4,
                        "launch_type": "manual",
                        "status": "successful",
                        "failed": false,
                        "started": "2018-06-29T16:31:38.190595Z",
                        "finished": "2018-06-29T16:31:41.932635Z",
                        "elapsed": 3.742,
                        "job_explanation": "",
                        "execution_node": "localhost",
                        "local_path": "_4__demo_project",
                        "scm_type": "git",
                        "scm_url": "https://github.com/ansible/ansible-tower-samples",
                        "scm_branch": "",
                        "scm_clean": false,
                        "scm_delete_on_update": false,
                        "credential": null,
                        "timeout": 0,
                        "project": 4,
                        "job_type": "check"
                    }

    - key: b
      text: |
        'Customers are required to allow defined personnel or roles to select
        which auditable events are to be audited by specific components of the
        information system. A successful control response will discuss how
        audit generation is implemented, and who selects and configures
        auditable events on the information system. Approved personnel or
        roles are defined in AU-9(4).

        Documentation/guidance on satisfying this control is being
        tracked on GitHub:

        https://github.com/ComplianceAsCode/redhat/issues/296'
    - key: c
      text: |
        'Customers are required to generate audit records for the events
        defined in AU-2d with the content defined in AU-3. A successful control
        response will discuss how audit records are generated, and how they meet
        the requirements defined in AU-2 and AU-3.

        Documentation/guidance on satisfying this control is being
        tracked on GitHub:

        https://github.com/ComplianceAsCode/redhat/issues/297'
